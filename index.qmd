---
title: "Forecasting Unemployment rate using Bayesian VARs with Regime change"
author: "Nhu Minh Pham"

execute:
  echo: false
  
bibliography: references.bib
---

> **Abstract.** Research on how Bayesian VARs with regime change affect the forecasting 
of unemployment rate
>
> **Keywords.** bsvars, regime change, forecasting, R, 

# Introduction

The objective of this research project is to develop a Bayesian Vector Autoregression (BVAR) model incorporating regime changes to analyse the dynamic relationships among macroeconomic variables, assess their impact on the unemployment rate over different economic regimes through time-varying parameters, and enhance forecasting accuracy.

The question to be addressed in this research is: Can a Bayesian VAR model with regime changes accurately capture shifts in the relationships between unemployment rate and other macroeconomic variables for improved forecasting performance?

# Motivation
Understanding the impact of economic regime changes on the unemployment rate dynamics holds substantial importance in grasping the complexities of the labour market. The labour market is highly susceptible to various shocks and policy interventions, making accurate forecasting of the unemployment rate crucial for informed decision-making. By employing a Bayesian Vector Autoregression (BVAR) model that allows the parameters to vary across different economic regimes, we can gain a nuanced understanding of how the unemployment rate responds to diverse economic conditions and the efficacy of policies. This research enhances forecasting accuracy and offers valuable insights into the underlying drivers of unemployment fluctuations. By better understanding these dynamics, policymakers can make more informed decisions to counter economic instability.


# Data properties

For the investigation of the problem at hand, the selection of variables includes a comprehensive set of economic indicators and demographic factors that are crucial for understanding labour market dynamics and their impact on unemployment rates. 

For instance, GDP growth provides a broad measure of economic activity, serving as an indicator of overall labour market. Consumer price index, wage price index and interest rate reflect macroeconomic conditions and monetary policy, influencing consumer spending, business investment, and hiring decisions, thereby affecting unemployment trends. Government spending impacts aggregate demand and employment levels, while demographic factors such as population growth rate, average age of the workforce, and level of highest educational attainment offer insights into labour force participation and composition. 

Each variable's form/transformation will depend on its specific characteristics and the nature of its relationship with unemployment. For instance, variables like GDP growth may be included in their original form, while others, such as wpi might need to be computed from the index data. 

It's important to note that all data will be quarterly since the interest forecasting for unemployment will be conducted at a quarterly frequency. Quarterly frequency is suitable for capturing the diverse movements influencing unemployment, including short-term shocks, long-term trends, and policy changes, providing a balanced perspective.



\begin{align*}
& unmp_{t} & : & \text{Unemployment rate} \\
& gdp_{t} & : & \text{GDP per capita: Chain volume measures - Percentage changes} \\
& wpi_{t} & : & \text{Wage price index} \\
& cashrate_{t} & : & \text{Cash rate} \\
\end{align*}

```{r}
# Set global options to hide the source code, messages, and warnings
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
```

# Data Visualisation
```{r, hide = TRUE, echo=FALSE, warning=FALSE, message=FALSE}
library(readrba)
library(readabs)
library(ggplot2)
library(xts)
library(tseries)
library(MSwM)
library(xtable)
library(knitr)
```



```{r,echo=FALSE, warning=FALSE, message=FALSE}
start_date <- as.Date("1991-03-01")
end_date <- as.Date("2023-12-01")

########################################
# Define a function to process ABS data
########################################
process_abs_data <- function(series_id, start_date, end_date) {
  # Read raw data from ABS
  abs_data <- read_abs(series_id = series_id)
  
  # Convert to xts object
  abs_xts <- xts(abs_data$value, order.by = as.Date(abs_data$date))
  
  # Change frequency
  abs_quarterly <- apply.quarterly(abs_xts, last)
  
  # Convert to dataframe
  abs_df <- data.frame(Date = index(abs_quarterly), Value = coredata(abs_quarterly))
  
  # Subset to specified date range
  abs_df <- abs_df[abs_df$Date >= start_date & abs_df$Date <= end_date, ]
  
  # Return the processed dataframe
  return(abs_df)
}

########################################
# Define a function to process RBA data
########################################
process_rba_data <- function(series_id, start_date, end_date) {
  # Read raw data from ABS
  rba_data <- read_rba(series_id = series_id)
  
  # Convert to xts object
  rba_xts <- xts(rba_data$value, order.by = as.Date(rba_data$date))
  
  rba_quarterly <- apply.quarterly(rba_xts, mean)
  
  # Convert to dataframe
  rba_df <- data.frame(Date = index(rba_quarterly), Value = coredata(rba_quarterly))
  
  # Subset to specified date range
  rba_df <- rba_df[rba_df$Date >= start_date & rba_df$Date <= end_date, ]
  
  # Return the processed dataframe
  return(rba_df)
}

```


```{r,echo=FALSE, warning=FALSE, message=FALSE}

#### check flow and stock, stock = end of quarter, flow= sum up

# Unemployment rate ################## "6202.0", A84423130A trend, A84423046K seasonadj
unmp_df <- process_abs_data("A84423046K", start_date, end_date)

# GDP per capita: Chain volume measures; ##### "5206.0", A2304404C seasonadj, old A2304372W
gdp_df <- process_abs_data("A2304404C", start_date, end_date)

# WPI, Total hourly rates of pay including bonuses ###### 6345.0, A2713849C seasonadj
wpi_df <- process_abs_data("A2713849C", start_date, end_date)

# Cash rate ################## original
cashrate_df <- process_rba_data("FIRMMCRT", start_date, end_date)

```


```{r, plot, echo=FALSE, fig.width=8, fig.height=6}
dataframes <- list(unmp_df = "Unemployment rate",
                    gdp_df = "GDP per capita",
                    wpi_df = "WPI",
                    cashrate_df = "Cash rate")

par(mfrow = c(2, 2))

for (df_name in names(dataframes)) {
  df <- get(df_name)
  y_values <- df$Value
  plot(df$Date, y_values, type = "l", 
       xlab = "Date", 
       ylab = "Value", 
       main = dataframes[[df_name]])
}
```
<div id="figure1" style="text-align: center; color: #696969;">
###### Figure 1: Time series plots
</div>

```{r}
# Log-transformation
log_dataframes <- c("gdp_df", "wpi_df")

# Log-transform the specified dataframes
for (df_name in log_dataframes) {
  df <- get(df_name)
  df$Value <- log(df$Value)  # Log-transform the 'Value' column
  assign(df_name, df)         # Assign the modified dataframe back to its original name
}

```




```{r, echo=FALSE, fig.width=8, fig.height=6}

dataframes <- list(unmp_df = "Unemployment rate",
                    gdp_df = "GDP per capita",
                    wpi_df = "WPI",
                    cashrate_df = "Cash rate")

par(mfrow = c(2, 2))

for (df_name in names(dataframes)) {
  df <- get(df_name)
  y_values <- df$Value
  plot(df$Date, y_values, type = "l", 
       xlab = "Date", 
       ylab = "Value", 
       main = dataframes[[df_name]])
}
```
To stabilize the variance, log tranformation is performed on all variables except 
unemployment rate, participation rate and cash rate.

From the plot of the variables, some show stationary and some non-stationary, which can make it challenging to analyse data. Therefore, the ACF test is performed to identify patterns and trend.


```{r,echo=FALSE, fig.width=8, fig.height=6}
par(mfrow = c(2, 2))

# Loop through each dataframe and create ACF plot
for (df_name in names(dataframes)) {
  df <- get(df_name)
  y_values <- df$Value
  acf(y_values, plot = TRUE, na.action = na.pass, main = paste("ACF of",
                                                               dataframes[[df_name]]))
}
```
<div id="figure2" style="text-align: center; color: #696969;">
###### Figure 2: ACF plots
</div>

The ACF plots show the variables have persistence or dependence in the data as the they are slowly decaying, indicates that there is a strong correlation between each variable 
and its past values, though this auto correlations decrease as lags increase.

```{r,echo=FALSE, fig.width=8, fig.height=6}
par(mfrow = c(2, 2))

# Loop through each dataframe and create ACF plot
for (df_name in names(dataframes)) {
  df <- get(df_name)
  y_values <- df$Value
  pacf(y_values, plot = TRUE, na.action = na.pass, main = paste("PACF of",
                                                               dataframes[[df_name]]))
}
```
<div id="figure3" style="text-align: center; color: #696969;">
###### Figure 3: PACF plots
</div>

The PACF plots show high autocorrelation at lag 1, and have clear cut offs.

The ADF is performed to further determine the stationary properties of the data.
Null hypothesis: a unit root is present
Alternative hypothesis: stationary
```{r}
# Perform ADF test for each variable
dataframes <- list(unmp_df = "Unemployment rate",
                    gdp_df = "GDP per capita",
                    wpi_df = "WPI",
                    cashrate_df = "Cash rate")

# Create an empty dataframe to store ADF test results
adf <- data.frame(Dickey_Fuller = numeric(length(dataframes)), 
                  p_value = numeric(length(dataframes)))

# Set row names to variable names
rownames(adf) <- names(dataframes)

# Perform ADF test for each variable
for (i in 1:length(dataframes)) {
  df <- get(names(dataframes)[i])  # Get the dataframe corresponding to the current variable
  adf_tmp <- adf.test(df$Value)    # Perform ADF test on the 'Value' column of the dataframe
  adf[i, "Dickey_Fuller"] <- as.numeric(adf_tmp$statistic)
  adf[i, "p_value"] <- as.numeric(adf_tmp$p.value)
}

# Round the numeric values to desired precision
adf <- round(adf, 3)

# Print the ADF test results
print(adf)
```


## Model

### Hypothesis

Var(p) model
\begin{aligned}
y_t = \beta_0 + \beta_1 y_{t-1} + \beta_2 x_{1, t-1} + \beta_3 x_{2, t-1} + \ldots + \beta_n x_{n, t-1} + \varepsilon_t
\end{aligned}


Var(p) model with regime change, meaning time-varying parameters
\begin{aligned}
y_t &= \beta_{0,S_t} + \beta_{1,S_t} y_{t-1} + \beta_{2,S_t} x_{1, t-1} + \beta_{3,S_t} x_{2, t-1} + \ldots + \beta_{n,S_t} x_{n, t-1} + \varepsilon_t \\
\end{aligned}

Probability of transitioning from one state to another
\begin{aligned}
P(S_t = j | S_{t-1} = i) &= \pi_{ij}
\end{aligned}



### Matrix form


\begin{align*}
\mathbf{Y}_t = \boldsymbol{\beta}_{S_t} \mathbf{X}_t + \boldsymbol{E}_t
\end{align*}

\begin{align*}
\boldsymbol{E}_t
\sim MN(0_T, \Sigma, I_T)
\end{align*}

\\begin{align*}
\\mathbf{Y}_t & : \\text{Matrix of response variables} \\\\
\\boldsymbol{\\beta} & : \\text{Coefficient matrix corresponding to regime state} \\\\
S_t & : \\text{Regime state} \\\\
\\mathbf{X}_t & : \\text{Matrix of predictor variables} \\\\
\\boldsymbol{\\varepsilon}_t & : \\text{Error term vector} 
\\end{align*}

\\begin{align*}
\\mathbf{Y}_t = \\begin{pmatrix}
\\text{Unemployment}_t \\\\
\\text{GDP}_t \\\\
\\text{WPI}_t \\\\
\\text{CashRate}_t \\\\
\\end{pmatrix}
\\end{align*}

The model's equations include time-varying parameters, such as the coefficients of lagged variables, which adapt to changing economic conditions.

```{r}
# Combine data frames into one data frame
# Truncate dates to the first day of the month
cashrate_df$Date <- as.Date(format(cashrate_df$Date, "%Y-%m-01"))
# Merge data frames by Date
merged_df <- merge(unmp_df, gdp_df, by = "Date", suffixes = c("_unmp", "_gdp"))
merged_df <- merge(merged_df, wpi_df, by = "Date", suffixes = c("", "_wpi"))
merged_df <- merge(merged_df, cashrate_df, by = "Date", suffixes = c("", "_cash"))

```

## Basic Model
The model follows the Normal Inverse Wishart distribution.

Likelihood function kernel
\begin{align}
L(A,\Sigma|Y,X) \propto det(\Sigma)^{-\frac{T}{2}}exp\{-\frac{1}{2}tr[\Sigma^{-1}(Y-XA)'(Y-XA)]\}
\end{align}


### Minnesota Prior distribution

The Minnesota prior is commonly used in Bayesian Vector Autoregression (BVAR) models due to its ability to impose shrinkage towards zero on the coefficients, effectively regularizing the estimation process. The Minnesota prior aligns effectively with the stylized fact of nonstationarity observed in macroeconomic variables.

\begin{align*}
p(A, \Sigma) = p(A \mid \Sigma) \cdot p(\Sigma) \\
A \mid \Sigma \sim \text{MN}_{K \times N} (\underline{A}, \Sigma, \underline{V}) \\
\Sigma \sim  \text{IW}_{N} (\underline{S}, \underline{v})\\
\end{align*}

With lags = 4 and N = 4

\begin{align*}
\underline{A} = \begin{bmatrix}
\mathbf{0}_{4 \times 1} & \mathbf{I}_{4} & \mathbf{0}_{4 \times (4-1)4}
\end{bmatrix}'
= \begin{bmatrix}
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\
\end{bmatrix}'
\end{align*}

The column-specific prior covariance of A
\begin{align*}
\underline{V} &= \text{diag}\left( \begin{bmatrix}
k_2 & k_1(\mathbf{p}^{-2} \otimes 1'_4)
\end{bmatrix} \right)\\
\mathbf{p} &= \begin{bmatrix}
1 & 2 & 3 & 4 \\
\end{bmatrix}
\end{align*}
\begin{align*}
& k_2 : \text{overall shrinkage for the constant term} \\
& k_1 : \text{overall shrinkage levels for autoregressive slopes} \\
\end{align*}

Prior covariance matrix
\begin{bmatrix}
k_2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \cdots & 0\\
0 & k_1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \cdots & 0\\
0 & 0 & k_1 & 0 & 0 & 0 & 0 & 0 & 0 & \cdots & 0\\
0 & 0 & 0 & k_1 & 0 & 0 & 0 & 0 & 0 & \cdots & 0\\
0 & 0 & 0 & 0 & k_1 & 0 & 0 & 0 & 0 & \cdots & 0\\ 
0 & 0 & 0 & 0 & 0 & \frac{k_1}{4} & 0 & 0 & 0 & \cdots & 0\\
0 & 0 & 0 & 0 & 0 & 0 & \frac{k_1}{4} & 0 & 0 & \cdots & 0\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{k_1}{4} & 0 & \cdots & 0\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{k_1}{4} & \cdots & 0\\
\vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \ddots & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & \frac{k_1}{16}      
\end{bmatrix}


```{r}
# Data configuration
N       = 4
p       = 4
S       = 1000

y       = merged_df
y       = ts(y[,c(2,3,4,5)], start=c(1997,9), frequency=4,
             names=c("unmp","gdp","wpi","cashrate"))
Y       = ts(y[5:nrow(y),], start=c(1998,9), frequency=4)

X       = matrix(1,nrow(Y),1)
for (i in 1:p){
  X     = cbind(X,y[5:nrow(y)-i,])
}
```

### The joint posterior distribution
\begin{align*}
p(A,\Sigma|Y,X) &\propto L(A,\Sigma|Y,X)p(A,\Sigma) \\
&= L(A,\Sigma|Y,X)p(A|\Sigma)p(\Sigma)
\end{align*}

\begin{align}
p(A,\Sigma|Y,X) &\propto \det(\Sigma)^{-\frac{T}{2}} \\
&\times exp\{-\frac{1}{2}tr[\Sigma^{-1}(Y-XA)'(Y-XA)]\} \\
&\times \det(\Sigma)^{-\frac{N+K+\underline{v}+1}{2}} \\
&\times exp\{-\frac{1}{2}tr[\Sigma^{-1}(A-\underline{A}) \underline{V}^{-1}(A-\underline{A})]\} \\
&\times exp\{-\frac{1}{2}tr[\Sigma^{-1}\underline{S}]\}
\end{align}

The full conditional joint posterior have the following form
\begin{align}
p(A|Y,X,\Sigma) &\sim MN_{K \times N}(\overline{A}, \Sigma,\overline{V} ) \\ 
p(\Sigma|Y,X) &\sim IW_{N}(\overline{S}, \overline{v})\\
\\
\overline{V} &= (X'X + \underline{V}^{-1})^{-1} \\
\overline{A} &= \overline{V}(X'Y+\underline{V}^{-1}\underline{A}) \\
\overline{v} &= T + \underline{v} \\ 
\overline{S} &= \underline{S}+Y'Y+\underline{A}'\underline{V}^{-1}\underline{A}-\overline{A}'
\overline{V}^{-1}\overline{A} \\
\end{align}


```{r, results='hide'}
# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/T
round(A.hat,3)
round(Sigma.hat,3)
round(cov2cor(Sigma.hat),3)

# Prior distribution
############################################################
kappa.1     = 1
kappa.2     = 100
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
A.prior[2:5, 1:4] <- diag(1, nrow = 4)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
```

1000 Sample draws from the joint distribution with Minnesota prior.
```{r}
# Normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

# Posterior draws 
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
  A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}

# round(apply(A.posterior,1:2,mean),3)
```

```{r}
# Report posterior means and sd of parameters
A.E         = round(apply(A.posterior,1:2,mean),6)
A.sd        = round(apply(A.posterior,1:2,sd),6)
Sigma.E     = round(apply(Sigma.posterior,1:2,mean),6)
Sigma.sd    = round(apply(Sigma.posterior,1:2,sd),6)

A_table <- data.frame(rbind(t(A.E)[1,],t(A.sd)[1,],t(A.E)[2,],t(A.sd)[2,]))
Sigma_table <- data.frame(rbind(t(Sigma.E)[1,],t(Sigma.sd)[1,],t(Sigma.E)[2,],t(Sigma.sd)[2,]))

kable(A_table, format = "html", caption = "Posterior A means and sd table",
      col.names = paste0(1:ncol(A_table)))

kable(Sigma_table, format = "html", caption = "Posterior Sigma means and sd table",
      col.names = paste0(1:ncol(Sigma_table)))

# simulate draws from the predictive density
# WARNING! This takes a while
############################################################
# Y.h         = array(NA,c(h,N,S))

# for (s in 1:S){
#  x.Ti        = Y[(nrow(Y)-h+1):nrow(Y),]
#  x.Ti        = x.Ti[4:1,]
#  for (i in 1:h){
#    x.T         = c(1,as.vector(t(x.Ti)))
#    Y.h[i,,s]   = rmvnorm(1, mean = x.T%*%A.posterior[,,s], sigma=Sigma.posterior[,,s])
#    x.Ti        = rbind(Y.h[i,,s],x.Ti[1:3,])
#  }
#}

```
#######################################################################################
## Extension 1 Model
Cointegration is when the non-stationary variables have an equilibrium long term 
relationship or a common trend. The model is extended to incorporate dummy-observation-prior, aiming to account for the potential cointegration amongst the variables, capturing the underlying economic relationships and dynamics.

This approach allows us to leverage both the observed data and additional information about the structural relationships among variables, leading to more accurate parameter estimation and potentially improved forecasting performance.

Dummy observation prior also known as known as “sum-of-coefficients” proposed by Doan, Litterman, and Sims (1984) required a set of artificial observations for each variable. 

\begin{align*}
\underset{4\times 4}y^{+} &= diag(\frac{\overline{y_0}}{\mu}) \\
\underset{4 \times (1+4\times 4)}{x^{+}} &= [\underset{n \times 1}0,y^{+},...,y^{+}]
\end{align*}

To be consistent with cointegration, an additional prior proposed by Sims (1993)
is also added.
$$
\underset{{1\times 4}}{y^{++}}= \frac{\overline{y_{oi}}}{\delta}, with \ i =1,2,3,4
$$


\begin{align*}
\underset{1\times 4}y^{++} &= \frac{\overline{y_0}^{'}}{\delta}\\
\underset{1 \times (1+4\times 4)}{x^{++}} &= [\frac{1}{\delta},y^{++},...,y^{++}]\\
\end{align*}
\begin{align*}
& \overline{y_0} : \text{average of the first 4 lag observations for each variable}\\
& \mu: \text{controls variance }\\
& \delta: \text{controls the tightness of the prior}
\end{align*}

From the above, the following matrix form is created:
$$
Y^+ = [y^+ \  \  \  y^{++}]' \\
X^+ = [x^+ \  \  \  x^{++}]'
$$
\begin{align*}
Y^{+} & = X^{+}A+E^{+} \\
Y^{+} & = \begin{bmatrix}
\frac{\overline{y_0}_1}{\mu} & 0 & 0 & 0 \\
0 & \frac{\overline{y_0}_2}{\mu} & 0 & 0 \\
0 & 0 & \frac{\overline{y_0}_3}{\mu} & 0 \\
0 & 0 & 0 & \frac{\overline{y_0}_4}{\mu} \\
\frac{\overline{y_0}_1}{\delta} & \frac{\overline{y_0}_2}{\delta} & \frac{\overline{y_0}_3}{\delta} & \frac{\overline{y_0}_4}{\delta} \\
\end{bmatrix}
\end{align*}

\begin{align*}
X^{+} = \begin{bmatrix}
0 & \frac{\overline{y_0}_1}{\mu} & 0 & 0 & 0 & \cdots & 0 \\
0 & 0 & \frac{\overline{y_0}_2}{\mu} & 0 & 0 & \cdots & 0 \\
0 & 0 & 0 & \frac{\overline{y_0}_3}{\mu} & 0 & \cdots & 0 \\
0 & 0 & 0 & 0 & \frac{\overline{y_0}_4}{\mu} & \cdots & \frac{\overline{y_0}_4}{\mu} \\
\frac{1}{\delta} & \frac{\overline{y_0}_1}{\delta} & \frac{\overline{y_0}_2}{\delta} & \frac{\overline{y_0}_3}{\delta} & \frac{\overline{y_0}_4}{\delta} & \cdots & \frac{\overline{y_0}_4}{\delta} \\
\end{bmatrix}
\end{align*}

The prior distribution is

\begin{align*}
A \mid \Sigma &\sim \text{MN}_{K \times N} (\underline{A}^{+}, \Sigma, \underline{V}^{+}) \\
\Sigma &\sim  \text{IW}_{N} (\underline{S}^{+}, \underline{v}^{+})\\
\\
\underline{A}^{+} &= (X^{+'}X )^{-1}X^{+'}Y^{+} \\
\underline{V}^{+} &= (X^{+'}X )^{-1} \\
\underline{v}^{+} &= T^{+} - K - N - 1\\ 
\underline{S}^{+} &= (Y^{+}-X^{+}\underline{A}^{+})^{'}(Y^{+}-X^{+}\underline{A}^{+})\\
\end{align*}


### Minnesota and dummy observation prior distribution 
The newly created matrix specified the model has 5 dummy observations. The above prior distribution is likely to encounter the problem of not having enough observations and 
lead to many challenges to meet the requirements for degree of freedom or 
invertibility of matrices. To resolve this, the combination of specifying the prior 
through both Normal inverse Wishart and dummy-observations is proposed, which is detived similarly to the posterior distribution in the basic model. 

\begin{align*}
A \mid \Sigma &\sim \text{MN}_{K \times N} (\widetilde{A}, \Sigma, \widetilde{V}) \\
\Sigma &\sim  \text{IW}_{N} (\widetilde{S}, \widetilde{v})\\
\\
\widetilde{A} &= \widetilde{V}(X^{+'}Y{+}+\underline{V}^{-1}\underline{A}) \\
\widetilde{V} &= (X^{+'}X^{+} + \underline{V}^{-1})^{-1} \\
\widetilde{v} &= T^{+} + \underline{v} \\ 
\widetilde{S} &= \underline{S}+Y^{+'}Y^{+}+\underline{A}'\underline{V}^{-1}\underline{A} -\widetilde{A}'\widetilde{V}^{-1}\widetilde{A} \\
\end{align*}

```{r}
# Data configuration
N       = 4
p       = 4
S       = 1000
mu      = 2
delta   = 2

avg_unmp <- mean(X[1, c(2, 6, 10, 14)])
avg_gdp <- mean(X[1, c(3, 7, 11, 15)])
avg_wpi <- mean(X[1, c(4, 8, 12, 16)])
avg_cash <- mean(X[1, c(5, 9, 13, 17)])

diag_mu <- diag(c(avg_unmp/mu, avg_gdp/mu, avg_wpi/mu, avg_cash/mu))
row_delta <-  matrix(c(avg_unmp/delta, avg_gdp/delta, avg_wpi/delta, avg_cash/delta), nrow = 1)

Y_d       = rbind(diag_mu, row_delta)
  
first_vector <- matrix(c(0,0,0,0, 1/delta), ncol = 1)
X_d      = cbind(first_vector, Y_d, Y_d, Y_d, Y_d)
```


```{r}
# Normal-inverse Wishard posterior parameters
############################################################
V.tilde.inv   = t(X_d)%*%X_d + diag(1/diag(V.prior))
V.tilde       = solve(V.tilde.inv)
A.tilde       = V.tilde%*%(t(X_d)%*%Y_d + diag(1/diag(V.prior))%*%A.prior)
nu.tilde      = nrow(Y_d) + nu.prior
S.tilde       = S.prior + t(Y_d)%*%Y_d + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.tilde)%*%V.tilde.inv%*%A.tilde
S.tilde.inv   = solve(S.tilde)

```

The full conditional joint posterior have the following form
\begin{align}
p(A|Y,X,\Sigma) &\sim MN_{K \times N}(\overline{A}, \Sigma,\overline{V} ) \\ 
p(\Sigma|Y,X) &\sim IW_{N}(\overline{S}, \overline{v})\\
\\
\overline{V} &= (X'X + \widetilde{V}^{-1})^{-1} \\
\overline{A} &= \overline{V}(X'Y+\widetilde{V}^{-1}\widetilde{A}) \\
\overline{v} &= T + \widetilde{v} \\ 
\overline{S} &= \widetilde{S}+Y'Y+\widetilde{A}'\widetilde{V}^{-1}\widetilde{A}-\overline{A}'
\overline{V}^{-1}\overline{A} \\
\end{align}

```{r}
# Normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.tilde))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.tilde))%*%A.tilde)
nu.bar      = nrow(Y) + nu.tilde
S.bar       = S.tilde + t(Y)%*%Y + t(A.tilde)%*%diag(1/diag(V.tilde))%*%A.tilde - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

# Posterior draws 
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
  A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}

# Report posterior means and sd of parameters
A.E         = round(apply(A.posterior,1:2,mean),6)
A.sd        = round(apply(A.posterior,1:2,sd),6)
Sigma.E     = round(apply(Sigma.posterior,1:2,mean),6)
Sigma.sd    = round(apply(Sigma.posterior,1:2,sd),6)

A_table <- data.frame(rbind(t(A.E)[1,],t(A.sd)[1,],t(A.E)[2,],t(A.sd)[2,]))
Sigma_table <- data.frame(rbind(t(Sigma.E)[1,],t(Sigma.sd)[1,],t(Sigma.E)[2,],t(Sigma.sd)[2,]))

kable(A_table, format = "html", caption = "Posterior A means and sd table",
      col.names = paste0(1:ncol(A_table)))

kable(Sigma_table, format = "html", caption = "Posterior Sigma means and sd table",
      col.names = paste0(1:ncol(Sigma_table)))

```
## Model Proof
1000 observations are simulated from a bi-variate Gaussian random walk process annd is used as data for the below proofs.

### Basic model
```{r}
set.seed(123456)
N       = 2
p       = 1
S       = 1000

r1 = cumsum(rnorm(1000,0,1))
r2 = cumsum(rnorm(1000,0,1))

r = cbind(r1, r2) 

Y = ts(r[2:nrow(r),], frequency=1)

X     = matrix(1,nrow(Y),1)
X     = cbind(X,r[2:nrow(r)-1,])

# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)

# Prior distribution
############################################################
kappa.1     = 1
kappa.2     = 100
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
A.prior[2:(N + 1),] = diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1

# Normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

# Posterior draws 
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
  A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}

# Report posterior means and sd of parameters
A.E         = round(apply(A.posterior,1:2,mean),6)
A.sd        = round(apply(A.posterior,1:2,sd),6)
Sigma.E     = round(apply(Sigma.posterior,1:2,mean),6)
Sigma.sd    = round(apply(Sigma.posterior,1:2,sd),6)


kable(A.E, format = "html", caption = "Posterior mean of autoregressive",
      col.names = paste0(1:ncol(A.E)))

kable(Sigma.E, format = "html", caption = "Posterior mean of covarince",
      col.names = paste0(1:ncol(Sigma.E)))



# Ask A.prior Correct
# Ask Dummy Good
# Derivation do need the steps? Yes
# Table presentation OK
# Use artificial as data? Yes. construct Y and X
# do this for basic and extension? Yes
```
### Extended model
```{r}
diag_mu <- diag(c(X[1,2]/mu, X[1,3]/mu))
row_delta <-  matrix(c(X[1,2]/delta, X[1,3]/delta), nrow = 1)

Y_d       = rbind(diag_mu, row_delta)
  
first_vector <- matrix(c(0,0, 1/delta), ncol = 1)
X_d      = cbind(first_vector, Y_d)

# Normal-inverse Wishard prior parameters
############################################################
V.tilde.inv     = t(X_d)%*%X_d + diag(1/diag(V.prior))
V.tilde       = solve(V.tilde.inv)
A.tilde       = V.tilde%*%(t(X_d)%*%Y_d + diag(1/diag(V.prior))%*%A.prior)
nu.tilde      = nrow(Y_d) + nu.prior
S.tilde       = S.prior + t(Y_d)%*%Y_d + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.tilde)%*%V.tilde.inv%*%A.tilde
S.tilde.inv   = solve(S.tilde)


# Normal-inverse Wishard posterior parameters
############################################################
V.bar.inv   = t(X)%*%X + diag(1/diag(V.tilde))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.tilde))%*%A.tilde)
nu.bar      = nrow(Y) + nu.tilde
S.bar       = S.tilde + t(Y)%*%Y + t(A.tilde)%*%diag(1/diag(V.tilde))%*%A.tilde - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

# Posterior draws 
############################################################
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
  A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}

# Report posterior means and sd of parameters
A.E         = round(apply(A.posterior,1:2,mean),6)
A.sd        = round(apply(A.posterior,1:2,sd),6)
Sigma.E     = round(apply(Sigma.posterior,1:2,mean),6)
Sigma.sd    = round(apply(Sigma.posterior,1:2,sd),6)

kable(A.E, format = "html", caption = "Posterior mean of autoregressive",
      col.names = paste0(1:ncol(A.E)))

kable(Sigma.E, format = "html", caption = "Posterior mean of covarince",
      col.names = paste0(1:ncol(Sigma.E)))

```


```{r}
# Need Model
# Need number of regime states -> AIC,BIC? No need, r=2
# dummy obse prior+minnesota, 2021, 2016

# state 2
# Need lag
# To estimate S, How do i want to model St
# Mackov switching or assume S



# Find number of regime states
# mod.mswm <- msmFit(mod,k=2,p=0,sw=c(TRUE,TRUE),control=list(parallel=TRUE))

```



# References {.unnumbered}